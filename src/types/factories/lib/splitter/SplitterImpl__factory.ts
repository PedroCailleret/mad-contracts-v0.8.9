/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
  BigNumberish,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SplitterImpl,
  SplitterImplInterface,
} from "../../../lib/splitter/SplitterImpl";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "payees",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "shares_",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ERC20PaymentReleased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
    ],
    name: "PayeeAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "PaymentReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "PaymentReleased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "payee",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "releasable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "releasable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "released",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "released",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "shares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "totalReleased",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalReleased",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405260405162000de138038062000de1833981016040819052620000269162000338565b80518251146200006f5760405162461bcd60e51b815260206004820152600f60248201526e0988a9c8ea890be9a92a69a82a8869608b1b60448201526064015b60405180910390fd5b8151620000ab5760405162461bcd60e51b81526020600482015260096024820152684e4f5f50415945455360b81b604482015260640162000066565b81516000905b8082101562000128576200011c848381518110620000df57634e487b7160e01b600052603260045260246000fd5b60200260200101518484815181106200010857634e487b7160e01b600052603260045260246000fd5b60200260200101516200013260201b60201c565b816001019150620000b1565b50505050620004a9565b6001600160a01b038216620001795760405162461bcd60e51b815260206004820152600c60248201526b444541445f4144445245535360a01b604482015260640162000066565b80620001b85760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f534841524560981b604482015260640162000066565b6001600160a01b03821660009081526002602052604090205415620002105760405162461bcd60e51b815260206004820152600d60248201526c414c52454144595f504159454560981b604482015260640162000066565b60048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b0319166001600160a01b038416908117909155600090815260026020526040812082905554620002789082906200046e565b600055604080516001600160a01b0384168152602081018390527f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac910160405180910390a15050565b600082601f830112620002d2578081fd5b81516020620002eb620002e58362000448565b62000415565b80838252828201915082860187848660051b89010111156200030b578586fd5b855b858110156200032b578151845292840192908401906001016200030d565b5090979650505050505050565b600080604083850312156200034b578182fd5b82516001600160401b038082111562000362578384fd5b818501915085601f83011262000376578384fd5b8151602062000389620002e58362000448565b8083825282820191508286018a848660051b8901011115620003a9578889fd5b8896505b84871015620003e25780516001600160a01b0381168114620003cd57898afd5b835260019690960195918301918301620003ad565b5091880151919650909350505080821115620003fc578283fd5b506200040b85828601620002c1565b9150509250929050565b604051601f8201601f191681016001600160401b038111828210171562000440576200044062000493565b604052919050565b60006001600160401b0382111562000464576200046462000493565b5060051b60200190565b600082198211156200048e57634e487b7160e01b81526011600452602481fd5b500190565b634e487b7160e01b600052604160045260246000fd5b61092880620004b96000396000f3fe6080604052600436106100c05760003560e01c80639852595c11610074578063ce7c2ac21161004e578063ce7c2ac21461025e578063d79779b214610294578063e33b7de3146102ca57600080fd5b80639852595c146101e8578063a3f8eace1461021e578063c45ac0501461023e57600080fd5b8063406072a9116100a5578063406072a91461014a57806348b75044146101905780638b83209b146101b057600080fd5b806319165587146101045780633a98ef391461012657600080fd5b366100ff57604080513381523460208201527f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770910160405180910390a1005b600080fd5b34801561011057600080fd5b5061012461011f3660046107fb565b6102df565b005b34801561013257600080fd5b506000545b6040519081526020015b60405180910390f35b34801561015657600080fd5b50610137610165366004610817565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b34801561019c57600080fd5b506101246101ab366004610817565b610417565b3480156101bc57600080fd5b506101d06101cb36600461084f565b610574565b6040516001600160a01b039091168152602001610141565b3480156101f457600080fd5b506101376102033660046107fb565b6001600160a01b031660009081526003602052604090205490565b34801561022a57600080fd5b506101376102393660046107fb565b6105b2565b34801561024a57600080fd5b50610137610259366004610817565b6105fa565b34801561026a57600080fd5b506101376102793660046107fb565b6001600160a01b031660009081526002602052604090205490565b3480156102a057600080fd5b506101376102af3660046107fb565b6001600160a01b031660009081526005602052604090205490565b3480156102d657600080fd5b50600154610137565b6001600160a01b0381166000908152600260205260409020546103355760405162461bcd60e51b81526020600482015260096024820152684e4f5f53484152455360b81b60448201526064015b60405180910390fd5b6000610340826105b2565b9050806103805760405162461bcd60e51b815260206004820152600e60248201526d11115392515117d050d0d3d5539560921b604482015260640161032c565b6001600160a01b038216600090815260036020526040812080548392906103a890849061087f565b9250508190555080600160008282546103c1919061087f565b909155506103d1905082826106d4565b604080516001600160a01b0384168152602081018390527fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b056910160405180910390a15050565b6001600160a01b0381166000908152600260205260409020546104685760405162461bcd60e51b81526020600482015260096024820152684e4f5f53484152455360b81b604482015260640161032c565b600061047483836105fa565b9050806104b45760405162461bcd60e51b815260206004820152600e60248201526d11115392515117d050d0d3d5539560921b604482015260640161032c565b6001600160a01b038084166000908152600660209081526040808320938616835292905290812080548392906104eb90849061087f565b90915550506001600160a01b0383166000908152600560205260408120805483929061051890849061087f565b909155506105299050838383610734565b604080516001600160a01b038481168252602082018490528516917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a910160405180910390a2505050565b60006004828154811061059757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031692915050565b6000806105be60015490565b6105c8904761087f565b90506105f383826105ee866001600160a01b031660009081526003602052604090205490565b6107c0565b9392505050565b6001600160a01b03821660009081526005602052604081205481906040516370a0823160e01b81523060048201526001600160a01b038616906370a082319060240160206040518083038186803b15801561065457600080fd5b505afa158015610668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068c9190610867565b610696919061087f565b6001600160a01b038086166000908152600660209081526040808320938816835292905220549091506106cc90849083906107c0565b949350505050565b600080600080600085875af190508061072f5760405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c454400000000000000000000000000604482015260640161032c565b505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806107ba5760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c45440000000000000000000000000000000000604482015260640161032c565b50505050565b600080546001600160a01b0385168252600260205260408220548391906107e790866108b7565b6107f19190610897565b6106cc91906108d6565b60006020828403121561080c578081fd5b81356105f381610903565b60008060408385031215610829578081fd5b823561083481610903565b9150602083013561084481610903565b809150509250929050565b600060208284031215610860578081fd5b5035919050565b600060208284031215610878578081fd5b5051919050565b60008219821115610892576108926108ed565b500190565b6000826108b257634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156108d1576108d16108ed565b500290565b6000828210156108e8576108e86108ed565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461091857600080fd5b5056fea164736f6c6343000804000a";

type SplitterImplConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SplitterImplConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SplitterImpl__factory extends ContractFactory {
  constructor(...args: SplitterImplConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    payees: PromiseOrValue<string>[],
    shares_: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<SplitterImpl> {
    return super.deploy(
      payees,
      shares_,
      overrides || {}
    ) as Promise<SplitterImpl>;
  }
  override getDeployTransaction(
    payees: PromiseOrValue<string>[],
    shares_: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(payees, shares_, overrides || {});
  }
  override attach(address: string): SplitterImpl {
    return super.attach(address) as SplitterImpl;
  }
  override connect(signer: Signer): SplitterImpl__factory {
    return super.connect(signer) as SplitterImpl__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SplitterImplInterface {
    return new utils.Interface(_abi) as SplitterImplInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SplitterImpl {
    return new Contract(address, _abi, signerOrProvider) as SplitterImpl;
  }
}
